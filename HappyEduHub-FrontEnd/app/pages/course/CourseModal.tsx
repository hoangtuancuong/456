'use client';

import { Course } from '@/app/utils/api_model';
import { processGoogleDriveLink } from '@/app/utils/utils';
import Breadcrumb from '@/components/Common/Breadcrumb';
import { Icon } from '@iconify/react';
import { Avatar, Box, IconButton, Modal } from '@mui/material';
import { CheckBoxRounded } from '@mui/icons-material';
import { Button } from 'flowbite-react';
import { useEffect, useState } from 'react';
import { callApi } from '@/app/utils/api';
import { notify } from '@/components/Alert/Alert';

export default function CourseModal({
  course,
  show,
  onClose,
}: {
  course: Course;
  show: boolean;
  onClose: () => void;
}) {
  const [canEnroll, setCanEnroll] = useState(true);

  useEffect(() => {
    const checkEnroll = async () => {
      try {
        setCanEnroll(false);
        const res = await callApi(`courses/${course.id}/check-enroll`, "GET");
        setCanEnroll(true);
      } catch (_) {
      }
    };
    checkEnroll();
  }, [course]);

  const handleEnroll = async () => {
    try {
      await callApi(`courses/${course.id}/enroll`, "POST");
      notify("ƒêƒÉng k√Ω kh√≥a h·ªçc th√†nh c√¥ng", "success");
      onClose();
      setCanEnroll(false);
    } catch (_) {
      notify("ƒêƒÉng k√Ω kh√≥a h·ªçc th·∫•t b·∫°i", "error");
      setCanEnroll(true);
    }
  };
  
  return (
    <Modal
      open={show}
      onClose={onClose}
      className="shadow-md"
      sx={{
        borderRadius: '12px',
      }}
    >
      <Box
        sx={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: '80%',
          borderRadius: '12px',
          bgcolor: 'background.paper',
        }}
      >
        <div className="flex flex-col mx-4 mt-4 mb-8">
          <IconButton onClick={onClose} className="self-end">
            <Icon icon="mdi:close" color="black" fontSize={24} />
          </IconButton>
          <div className="flex flex-col md:flex-row ml-8">
            <div className="flex flex-col mr-12" style={{ flexGrow: 2 }}>
              <h1 className="text-2xl font-bold mb-2">{course?.name}</h1>
              <span className="text-lg text-gray-500 mb-8">
                {course?.description}
              </span>
              <div className="h-full rounded-md border-2 border-dashed border-blue-300 p-4 text-blue-500 flex flex-col gap-2">
                <span className="text-lg font-bold">Th√¥ng tin gi√°o vi√™n</span>
                {course?.teacher && (
                  <>
                    <div className="flex items-center gap-2">
                      <Avatar
                        className="w-8 h-8"
                        src={processGoogleDriveLink(course.teacher.avatar_url)}
                      />
                      <span className="text-sm">
                        {JSON.parse(course.teacher.portfolio).hoc_ham ===
                        'Th·∫°c sƒ©'
                          ? 'ThS.'
                          : JSON.parse(course.teacher.portfolio).hoc_vi ===
                              'Ti·∫øn sƒ©'
                            ? 'TS.'
                            : ''}{' '}
                        {course.teacher.name}
                      </span>
                    </div>
                    <span className="text-md font-bold">Gi·ªõi thi·ªáu</span>
                    <div className="flex flex-col gap-2">
                      <span className="text-sm">
                        {JSON.parse(course.teacher.portfolio).bio}
                      </span>
                      {/* <span className="text-sm">{"[H·ªç v√† t√™n] l√† m·ªôt gi√°o vi√™n [m√¥n h·ªçc] v·ªõi [s·ªë nƒÉm] nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y t·∫°i [tr∆∞·ªùng h·ªçc/c∆° s·ªü gi√°o d·ª•c]. V·ªõi ni·ªÅm ƒëam m√™ gi·∫£ng d·∫°y v√† ph√°t tri·ªÉn t∆∞ duy s√°ng t·∫°o cho h·ªçc sinh, [t√™n] lu√¥n n·ªó l·ª±c √°p d·ª•ng ph∆∞∆°ng ph√°p gi√°o d·ª•c hi·ªán ƒë·∫°i, gi√∫p h·ªçc sinh kh√¥ng ch·ªâ ti·∫øp thu ki·∫øn th·ª©c m√† c√≤n ph√°t tri·ªÉn k·ªπ nƒÉng t∆∞ duy ph·∫£n bi·ªán v√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ.\n\nB√™n c·∫°nh c√¥ng vi·ªác gi·∫£ng d·∫°y, [t√™n] c≈©ng t√≠ch c·ª±c tham gia v√†o c√°c ho·∫°t ƒë·ªông ƒë√†o t·∫°o gi√°o vi√™n, nghi√™n c·ª©u ph∆∞∆°ng ph√°p s∆∞ ph·∫°m, v√† ·ª©ng d·ª•ng c√¥ng ngh·ªá trong gi√°o d·ª•c ƒë·ªÉ n√¢ng cao ch·∫•t l∆∞·ª£ng d·∫°y v√† h·ªçc."}</span> */}
                    </div>
                    <span className="text-md font-bold">
                      Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y
                    </span>
                    <div className="flex flex-col gap-2">
                      <span className="text-sm">
                        {
                          JSON.parse(course.teacher.portfolio)
                            .teaching_philosophy
                        }
                      </span>
                      {/* <span className="text-sm">{"T√¥i tin r·∫±ng gi√°o d·ª•c kh√¥ng ch·ªâ l√† truy·ªÅn ƒë·∫°t ki·∫øn th·ª©c m√† c√≤n l√† truy·ªÅn c·∫£m h·ª©ng, kh∆°i g·ª£i ni·ªÅm ƒëam m√™ h·ªçc t·∫≠p v√† gi√∫p h·ªçc sinh ph√°t tri·ªÉn to√†n di·ªán c·∫£ v·ªÅ t∆∞ duy l·∫´n nh√¢n c√°ch.\n\nüîπ H·ªçc t·∫≠p l·∫•y h·ªçc sinh l√†m trung t√¢m: M·ªói h·ªçc sinh l√† m·ªôt c√° th·ªÉ ƒë·ªôc ƒë√°o, c√≥ c√°ch h·ªçc ri√™ng. T√¥i lu√¥n c·ªë g·∫Øng t·∫°o ra m·ªôt m√¥i tr∆∞·ªùng h·ªçc t·∫≠p t√≠ch c·ª±c, n∆°i h·ªçc sinh ƒë∆∞·ª£c khuy·∫øn kh√≠ch ƒë·∫∑t c√¢u h·ªèi, suy nghƒ© ƒë·ªôc l·∫≠p v√† kh√°m ph√° ki·∫øn th·ª©c theo c√°ch c·ªßa ri√™ng m√¨nh.\n\nüîπ H·ªçc th√¥ng qua th·ª±c ti·ªÖn: T√¥i tin v√†o ph∆∞∆°ng ph√°p h·ªçc t·∫≠p d·ª±a tr√™n tr·∫£i nghi·ªám th·ª±c t·∫ø. Thay v√¨ ch·ªâ ti·∫øp thu l√Ω thuy·∫øt, h·ªçc sinh c·∫ßn c√≥ c∆° h·ªôi √°p d·ª•ng ki·∫øn th·ª©c v√†o th·ª±c t·∫ø th√¥ng qua d·ª± √°n, t√¨nh hu·ªëng gi·∫£ l·∫≠p v√† c√°c ho·∫°t ƒë·ªông t∆∞∆°ng t√°c.\n\nüîπ Ph√°t tri·ªÉn t∆∞ duy ph·∫£n bi·ªán v√† s√°ng t·∫°o: Trong m·ªôt th·∫ø gi·ªõi kh√¥ng ng·ª´ng thay ƒë·ªïi, k·ªπ nƒÉng quan tr·ªçng nh·∫•t kh√¥ng ph·∫£i l√† ghi nh·ªõ th√¥ng tin m√† l√† kh·∫£ nƒÉng t∆∞ duy ph·∫£n bi·ªán, gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ v√† s√°ng t·∫°o. T√¥i lu√¥n khuy·∫øn kh√≠ch h·ªçc sinh ƒë·∫∑t c√¢u h·ªèi, th√°ch th·ª©c gi·∫£ ƒë·ªãnh v√† t√¨m ra nh·ªØng c√°ch ti·∫øp c·∫≠n m·ªõi.\n\nüîπ T·∫°o m√¥i tr∆∞·ªùng h·ªçc t·∫≠p t√≠ch c·ª±c: T√¥i tin r·∫±ng s·ª± t√¥n tr·ªçng, ƒë·ªông vi√™n v√† th·∫•u hi·ªÉu l√† ch√¨a kh√≥a ƒë·ªÉ h·ªçc sinh ph√°t huy h·∫øt ti·ªÅm nƒÉng c·ªßa m√¨nh. M·ªôt l·ªõp h·ªçc t·ªët kh√¥ng ch·ªâ truy·ªÅn ƒë·∫°t ki·∫øn th·ª©c m√† c√≤n x√¢y d·ª±ng s·ª± t·ª± tin, l√≤ng ki√™n tr√¨ v√† tinh th·∫ßn h·ª£p t√°c cho h·ªçc sinh.\n\nT√≥m l·∫°i, s·ª© m·ªánh c·ªßa t√¥i l√† gi√∫p h·ªçc sinh kh√¥ng ch·ªâ h·ªçc t·ªët m√† c√≤n tr·ªü th√†nh nh·ªØng c√° nh√¢n c√≥ t∆∞ duy s·∫Øc b√©n, s√°ng t·∫°o v√† lu√¥n s·∫µn s√†ng h·ªçc h·ªèi su·ªët ƒë·ªùi."}</span> */}
                    </div>
                  </>
                )}
              </div>
            </div>
            <div
              className="flex flex-col items-start text-blue-500 mr-12"
              style={{ flexGrow: 1 }}
            >
              <Button color="blue" className="w-full my-5" disabled={!canEnroll} onClick={handleEnroll}>
                {canEnroll ? 'ƒêƒÉng k√Ω' : 'B·∫°n kh√¥ng th·ªÉ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y'}
              </Button>
              <div className="w-full rounded-md border-2 border-dashed border-blue-300 p-4 mt-4">
                <span className="text-lg font-bold mt-4 mb-1">
                  Th√¥ng tin kh√≥a h·ªçc
                </span>
                <div className="flex mt-1 gap-1 items-center">
                  <Icon icon="mdi:money" fontSize={24} />
                  {!course && <span>Ch∆∞a c√≥ th√¥ng tin</span>}
                  {course && (
                    <span className="text-md">
                      {Intl.NumberFormat('vi-VN', {
                        style: 'currency',
                        currency: 'VND',
                      }).format(course.fee || 0)}
                    </span>
                  )}
                </div>
                <div className="flex mt-1 gap-1 items-center">
                  <Icon icon="mdi:clock" fontSize={24} />
                  {!course && <span>Ch∆∞a c√≥ th√¥ng tin</span>}
                  {course && (
                    <span>
                      {Intl.DateTimeFormat('vi-VN', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                      }).format(new Date(course.start_date || ''))}{' '}
                      -{' '}
                      {Intl.DateTimeFormat('vi-VN', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                      }).format(new Date(course.end_date || ''))}
                    </span>
                  )}
                </div>
                <div className="flex mt-1 gap-1 items-center">
                  <Icon icon="mdi:calendar" fontSize={24} />
                  {!course && <span>Ch∆∞a c√≥ th√¥ng tin</span>}
                  {course && <span>{course.shifts.length} ca/tu·∫ßn</span>}
                </div>
              </div>
              <div className="w-full rounded-md border-2 border-dashed border-blue-300 p-4 mt-4">
                <span className="text-lg font-bold mt-4 mb-1">
                  Th√¥ng tin ca h·ªçc
                </span>
                <div className="w-full grid grid-cols-8 justify-items-center font-medium">
                  <span>Ca</span>
                  <span>T2</span>
                  <span>T3</span>
                  <span>T4</span>
                  <span>T5</span>
                  <span>T6</span>
                  <span className="text-blue-700">T7</span>
                  <span className="text-red-500">CN</span>
                  {[1, 2, 3, 4, 5, 6].map((shift) => {
                    return [
                      <span key={shift}>{shift}</span>,
                      ...[1, 2, 3, 4, 5, 6, 7].map((day) => {
                        if (
                          course?.shifts.find(
                            (courseShift) =>
                              courseShift.day === day &&
                              courseShift.shift === shift
                          )
                        ) {
                          return (
                            <CheckBoxRounded
                              key={day}
                              color="primary"
                              fontSize="small"
                            />
                          );
                        }
                        return (
                          <span
                            key={day}
                            className={
                              day == 6
                                ? 'text-blue-700'
                                : day == 7
                                  ? 'text-red-500'
                                  : ''
                            }
                          >
                            -
                          </span>
                        );
                      }),
                    ];
                  })}
                </div>
              </div>
            </div>
          </div>
        </div>
      </Box>
    </Modal>
  );
}
